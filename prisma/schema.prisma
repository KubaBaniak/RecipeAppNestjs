// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  password            String
  role                Role                  @default(USER)
  recipes             Recipe[]
  webhooks            Webhook[]
  personalAccessToken PersonalAccessToken[]
  twoFactorAuth       TwoFactorAuth?
}

model PendingUser {
  id                     Int      @id @default(autoincrement())
  email                  String   @unique
  password               String
  createdAt              DateTime @default(now())
}

model PendingUser {
  id                     Int      @id @default(autoincrement())
  email                  String   @unique
  password               String
  accountActivationToken String?
  createdAt              DateTime @default(now())
}

model Recipe {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String?
  ingredients String
  preparation String
  isPublic    Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    Int
  imageKeys   String[] @unique
}

model Webhook {
  id           Int            @id @default(autoincrement())
  name         String
  url          String
  type         String
  token        String?
  initVector   String?
  authTag      String?
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int
  webhookEvent WebhookEvent[]
}

model WebhookEvent {
  id        Int       @id @default(autoincrement())
  data      Json
  attempt   Int       @default(0)
  type      String
  status    String    @default("Pending")
  sentAt    DateTime?
  Webhook   Webhook   @relation(fields: [webhookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webhookId Int
}

model PersonalAccessToken {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int
  token         String
  invalidatedAt DateTime?
}

model TwoFactorAuth {
  id           Int                        @id @default(autoincrement())
  recoveryKeys TwoFactorAuthRecoveryKey[]
  user         User                       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int                        @unique
  secretKey    String
  isEnabled    Boolean                    @default(false)
}

model TwoFactorAuthRecoveryKey {
  id              Int            @id @default(autoincrement())
  key             String         @unique // The recovery key itself
  isUsed          Boolean        @default(false)
  usedAt          DateTime?
  twoFactorAuthId Int
  TwoFactorAuth   TwoFactorAuth? @relation(fields: [twoFactorAuthId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  USER
  ADMIN
}
