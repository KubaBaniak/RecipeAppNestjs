version: 2.1
orbs:
  github-super-linter: circleci/github-super-linter@1.0.1

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: cimg/node:18.16.0
    - image: cimg/postgres:14.1
    - image: redis:7.0.12-alpine

commands:
  install_dependencies:
    steps:
      - run:
          name: Install node dependencies from package-lock
          command: npm ci
  setup_prisma:
    steps:
      - run:
          name: Generate prisma model
          command: npx prisma generate
      - run:
          name: Generate and apply migration
          command: npx prisma migrate dev
  setup_docker_compose_dependencies:
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Run images of services declared in docker-compose.yml
          command: docker-compose --profile dependencies up -d
  create_env_files:
    steps:
      - run:
          name: Create .env file
          command: |
            cat > .env \<< EOF
            DATABASE_URL="$DATABASE_URL"
            POSTGRES_USER="$POSTGRES_USER"
            POSTGRES_PASSWORD="$POSTGRES_PASSWORD"
            PGADMIN_EMAIL="$PGADMIN_EMAIL"
            PGADMIN_PASSWORD="$PGADMIN_PASSWORD"
            JWT_EXPIRY_TIME="$JWT_EXPIRY_TIME"
            JWT_SECRET="$JWT_SECRET"
            BCRYPT_SALT="$BCRYPT_SALT"
            REDIS_PASSWORD="$REDIS_PASSWORD"
            REDIS_URL="$REDIS_URL"
            APP_IMAGE_NAME="$APP_IMAGE_NAME"
            AWS_S3_BUCKET="$AWS_S3_BUCKET"
            AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
            AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
            AWS_REGION="$AWS_REGION"      
            S3_URL_EXPIRY_TIME_IN_SEC="$S3_URL_EXPIRY_TIME_IN_SEC"
            WEBHOOK_TOKEN_SECRET_KEY="$WEBHOOK_TOKEN_SECRET_KEY"
            ROLLBAR_ACCESS_TOKEN="$ROLLBAR_ACCESS_TOKEN"
            ENVIRONMENT="$ENVIRONMENT"
            EOF
            cat .env > test.env

jobs:
  build:
    <<: *defaults
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          key: ${CACHE_VERSION}-deps-{{ checksum "package-lock.json" }}
      - install_dependencies
      - save_cache:
          paths:
            - './node_modules'
          key: ${CACHE_VERSION}-deps-{{ checksum "package-lock.json" }}

  unit_test:
    <<: *defaults
    resource_class: medium
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          key: ${CACHE_VERSION}-deps-{{ checksum "package-lock.json" }}
      - create_env_files
      - setup_prisma
      - setup_docker_compose_dependencies
      - run:
          name: Run unit tests
          command: |
            UNIT_TEST_FILES=$(circleci tests glob "./src/**/*.spec.ts" | circleci tests split --split-by=timings)
            npm test -- $UNIT_TEST_FILES
      - store_test_results:
          path: ./test_reports

  e2e_test:
    <<: *defaults
    resource_class: medium
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          key: ${CACHE_VERSION}-deps-{{ checksum "package-lock.json" }}
      - create_env_files
      - setup_prisma
      - setup_docker_compose_dependencies
      - run:
          name: Run e2e tests
          command: |
            E2E_TEST_FILES=$(circleci tests glob "./test/*{e2e-spec}.ts" | circleci tests split --split-by=timings)
            npm test -- $E2E_TEST_FILES --config ./test/jest-e2e.json
      - store_test_results:
          path: ./test_reportssrc

  release:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - install_dependencies
      - run: HUSKY=0 npx semantic-release

  deploy:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - add_ssh_keys:
          fingerprints:
            - '97:69:fe:70:ca:84:59:06:98:ab:9c:ec:d5:26:49:8c'
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build App image
          command: docker build -t $APP_IMAGE_NAME .
      - run:
          name: Save built image
          command: docker save $APP_IMAGE_NAME | gzip > appimage.tar.gz
      - create_env_files
      - run:
          name: Send production env
          command: |
            scp -o StrictHostKeyChecking=accept-new ./.env $SSH_USER@$SSH_HOST:.env
      - run:
          name: Send image to server
          command: |
            scp -o StrictHostKeyChecking=accept-new ./appimage.tar.gz $SSH_USER@$SSH_HOST:appimage.tar.gz
      - run:
          name: Send docker compose file
          command: |
            scp -o StrictHostKeyChecking=accept-new ./docker-compose.yml $SSH_USER@$SSH_HOST:docker-compose.yml
      - run:
          name: Deploy over SSH
          command: |
            ssh -o StrictHostKeyChecking=accept-new $SSH_USER@$SSH_HOST "source .env && ./recipe_app_setup.sh"

workflows:
  build_and_test:
    jobs:
      - build:
          context: recipe-app-test
      - unit_test:
          context: recipe-app-test
          requires:
            - build
      - e2e_test:
          context: recipe-app-test
          requires:
            - build
      - release:
          requires:
            - unit_test
            - e2e_test
          filters:
            branches:
              only:
                - main

  deploy:
    jobs:
      - deploy:
          context: recipe-app-production
          filters:
            branches:
              only:
                - main
